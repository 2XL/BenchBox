import psutil
import datetime



class PerformanceCounter:

    Type = None
    # have a live log appended
    processPid = None # process id to monitor


    def __init__(self, type, type_spec, processName):
        print '//constructor:PerformanceCounter {} {} {}'.format(type, type_spec, processName)
        self.Type = type # memory or processes or disk or network
        self.processName = processName
        self.log_file = self.Type + '_append.log'
        self.logger = open(self.log_file, 'w').close() # clear the file
        self.setProcId()

    def NextValue(self):
        to_execute = getattr(self, 'do'+self.Type)
        value = to_execute()
        print value
        with open(self.log_file, 'a') as file:
            file.write(value) # append text
            file.write('\n') # new line
        return value


    def doNetwork(self): # network traffic , in / out  {unit}
        print 'doNetwork'



    def doProcess(self): # cpu time %
        print 'doProcess'
        # en el de cristian se pilla de todos los cores por separado luego se juntan...
        process = 'TODO'
        tstamp =  datetime.datetime.now().isoformat()
        return '{} {} {}'.format(process, tstamp, psutil.cpu_percent(interval=None, percpu=False))


    def doDisk(self): # input output % time {write/read unit}
        print 'doDisk'
        # how to get the hdd usage??
        process = 'TODO'
        tstamp =  datetime.datetime.now().isoformat()
        return '{} {} {}'.format(process, tstamp, psutil.disk_usage('/').percent)



    def doMemory(self): # % memory usage : {units/%}
        print 'doMemory'
        # how to get the ram usage with psutil???
        #total = psutil.virtual_memory().total
        #active = psutil.virtual_memory().active
        #print active
        #print total
        #percent = (active*100/total)
        # todo check static process id generated by the stacksync or owncloud client and located at path /tmp/s.pid
        # overhead a reading a file... each time, should defined at class atribute level.
        process = 'TODO'
        tstamp =  datetime.datetime.now().isoformat()
        return '{} {} {}'.format(process, tstamp, psutil.virtual_memory().percent)


    def setProcId(self):
        # loop through all the process psutil and seek for its pid.
        # for p in psutil.get_process_list():
        #    print 'PID: {}'.format(self.processName)
        try :
            with open('/tmp/'+self.processName+'.pid', 'r') as f:
                read_data = f.read()
                print read_data
                self.processPid = read_data
        except Exception as e:
            print 'handle exception: {}'.format(e)
        finally:
            print 'how to handle process with the same name?'


if __name__ == '__main__':
    print 'Test main program returning values'